<?php
/**
 * ProductDetailedItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  KwelangaAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kwelanga Online Solutions
 *
 * OpenAPI for Kwelanga Online Solutions
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@kwelangasolutions.co.za
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KwelangaAPI\Model;

use \ArrayAccess;
use \KwelangaAPI\ObjectSerializer;

/**
 * ProductDetailedItem Class Doc Comment
 *
 * @category Class
 * @package  KwelangaAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductDetailedItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductDetailedItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'code' => 'string',
        'alt_code' => 'string',
        'ean_code' => 'string',
        'name' => 'string',
        'short_desc' => 'string',
        'long_desc' => 'string',
        'weight' => 'float',
        'items_per_case' => 'float',
        'web_enabled' => 'string',
        'status' => 'string',
        'image_uri' => 'string',
        'size' => '\KwelangaAPI\Model\ProductDetailedItemSize',
        'pricing' => '\KwelangaAPI\Model\ProductDetailedItemPricing'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'code' => null,
        'alt_code' => null,
        'ean_code' => null,
        'name' => null,
        'short_desc' => null,
        'long_desc' => null,
        'weight' => null,
        'items_per_case' => null,
        'web_enabled' => null,
        'status' => null,
        'image_uri' => null,
        'size' => null,
        'pricing' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'alt_code' => 'altCode',
        'ean_code' => 'eanCode',
        'name' => 'name',
        'short_desc' => 'shortDesc',
        'long_desc' => 'longDesc',
        'weight' => 'weight',
        'items_per_case' => 'itemsPerCase',
        'web_enabled' => 'webEnabled',
        'status' => 'status',
        'image_uri' => 'imageUri',
        'size' => 'size',
        'pricing' => 'pricing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'alt_code' => 'setAltCode',
        'ean_code' => 'setEanCode',
        'name' => 'setName',
        'short_desc' => 'setShortDesc',
        'long_desc' => 'setLongDesc',
        'weight' => 'setWeight',
        'items_per_case' => 'setItemsPerCase',
        'web_enabled' => 'setWebEnabled',
        'status' => 'setStatus',
        'image_uri' => 'setImageUri',
        'size' => 'setSize',
        'pricing' => 'setPricing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'alt_code' => 'getAltCode',
        'ean_code' => 'getEanCode',
        'name' => 'getName',
        'short_desc' => 'getShortDesc',
        'long_desc' => 'getLongDesc',
        'weight' => 'getWeight',
        'items_per_case' => 'getItemsPerCase',
        'web_enabled' => 'getWebEnabled',
        'status' => 'getStatus',
        'image_uri' => 'getImageUri',
        'size' => 'getSize',
        'pricing' => 'getPricing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['alt_code'] = isset($data['alt_code']) ? $data['alt_code'] : null;
        $this->container['ean_code'] = isset($data['ean_code']) ? $data['ean_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['short_desc'] = isset($data['short_desc']) ? $data['short_desc'] : null;
        $this->container['long_desc'] = isset($data['long_desc']) ? $data['long_desc'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['items_per_case'] = isset($data['items_per_case']) ? $data['items_per_case'] : null;
        $this->container['web_enabled'] = isset($data['web_enabled']) ? $data['web_enabled'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['image_uri'] = isset($data['image_uri']) ? $data['image_uri'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['pricing'] = isset($data['pricing']) ? $data['pricing'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets alt_code
     *
     * @return string|null
     */
    public function getAltCode()
    {
        return $this->container['alt_code'];
    }

    /**
     * Sets alt_code
     *
     * @param string|null $alt_code alt_code
     *
     * @return $this
     */
    public function setAltCode($alt_code)
    {
        $this->container['alt_code'] = $alt_code;

        return $this;
    }

    /**
     * Gets ean_code
     *
     * @return string|null
     */
    public function getEanCode()
    {
        return $this->container['ean_code'];
    }

    /**
     * Sets ean_code
     *
     * @param string|null $ean_code ean_code
     *
     * @return $this
     */
    public function setEanCode($ean_code)
    {
        $this->container['ean_code'] = $ean_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_desc
     *
     * @return string|null
     */
    public function getShortDesc()
    {
        return $this->container['short_desc'];
    }

    /**
     * Sets short_desc
     *
     * @param string|null $short_desc short_desc
     *
     * @return $this
     */
    public function setShortDesc($short_desc)
    {
        $this->container['short_desc'] = $short_desc;

        return $this;
    }

    /**
     * Gets long_desc
     *
     * @return string|null
     */
    public function getLongDesc()
    {
        return $this->container['long_desc'];
    }

    /**
     * Sets long_desc
     *
     * @param string|null $long_desc long_desc
     *
     * @return $this
     */
    public function setLongDesc($long_desc)
    {
        $this->container['long_desc'] = $long_desc;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets items_per_case
     *
     * @return float|null
     */
    public function getItemsPerCase()
    {
        return $this->container['items_per_case'];
    }

    /**
     * Sets items_per_case
     *
     * @param float|null $items_per_case items_per_case
     *
     * @return $this
     */
    public function setItemsPerCase($items_per_case)
    {
        $this->container['items_per_case'] = $items_per_case;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return string|null
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param string|null $web_enabled web_enabled
     *
     * @return $this
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets image_uri
     *
     * @return string|null
     */
    public function getImageUri()
    {
        return $this->container['image_uri'];
    }

    /**
     * Sets image_uri
     *
     * @param string|null $image_uri image_uri
     *
     * @return $this
     */
    public function setImageUri($image_uri)
    {
        $this->container['image_uri'] = $image_uri;

        return $this;
    }

    /**
     * Gets size
     *
     * @return \KwelangaAPI\Model\ProductDetailedItemSize|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \KwelangaAPI\Model\ProductDetailedItemSize|null $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets pricing
     *
     * @return \KwelangaAPI\Model\ProductDetailedItemPricing|null
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     *
     * @param \KwelangaAPI\Model\ProductDetailedItemPricing|null $pricing pricing
     *
     * @return $this
     */
    public function setPricing($pricing)
    {
        $this->container['pricing'] = $pricing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


