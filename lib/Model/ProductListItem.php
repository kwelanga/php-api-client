<?php
/**
 * ProductListItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  KwelangaAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kwelanga Online Solutions
 *
 * OpenAPI for Kwelanga Online Solutions
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@kwelangasolutions.co.za
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KwelangaAPI\Model;

use \ArrayAccess;
use \KwelangaAPI\ObjectSerializer;

/**
 * ProductListItem Class Doc Comment
 *
 * @category Class
 * @package  KwelangaAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ProductListItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'code' => 'string',
        'alt_code' => 'string',
        'ean_code' => 'string',
        'name' => 'string',
        'short_desc' => 'string',
        'items_per_case' => 'float',
        'web_enabled' => 'string',
        'status' => 'string',
        'image_uri' => 'string',
        'pricing' => '\KwelangaAPI\Model\ProductDetailedItemPricing'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'code' => null,
        'alt_code' => null,
        'ean_code' => null,
        'name' => null,
        'short_desc' => null,
        'items_per_case' => null,
        'web_enabled' => null,
        'status' => null,
        'image_uri' => null,
        'pricing' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'alt_code' => 'altCode',
        'ean_code' => 'eanCode',
        'name' => 'name',
        'short_desc' => 'shortDesc',
        'items_per_case' => 'itemsPerCase',
        'web_enabled' => 'webEnabled',
        'status' => 'status',
        'image_uri' => 'imageUri',
        'pricing' => 'pricing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'alt_code' => 'setAltCode',
        'ean_code' => 'setEanCode',
        'name' => 'setName',
        'short_desc' => 'setShortDesc',
        'items_per_case' => 'setItemsPerCase',
        'web_enabled' => 'setWebEnabled',
        'status' => 'setStatus',
        'image_uri' => 'setImageUri',
        'pricing' => 'setPricing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'alt_code' => 'getAltCode',
        'ean_code' => 'getEanCode',
        'name' => 'getName',
        'short_desc' => 'getShortDesc',
        'items_per_case' => 'getItemsPerCase',
        'web_enabled' => 'getWebEnabled',
        'status' => 'getStatus',
        'image_uri' => 'getImageUri',
        'pricing' => 'getPricing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['alt_code'] = $data['alt_code'] ?? null;
        $this->container['ean_code'] = $data['ean_code'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['short_desc'] = $data['short_desc'] ?? null;
        $this->container['items_per_case'] = $data['items_per_case'] ?? null;
        $this->container['web_enabled'] = $data['web_enabled'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['image_uri'] = $data['image_uri'] ?? null;
        $this->container['pricing'] = $data['pricing'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets alt_code
     *
     * @return string|null
     */
    public function getAltCode()
    {
        return $this->container['alt_code'];
    }

    /**
     * Sets alt_code
     *
     * @param string|null $alt_code alt_code
     *
     * @return self
     */
    public function setAltCode($alt_code)
    {
        $this->container['alt_code'] = $alt_code;

        return $this;
    }

    /**
     * Gets ean_code
     *
     * @return string|null
     */
    public function getEanCode()
    {
        return $this->container['ean_code'];
    }

    /**
     * Sets ean_code
     *
     * @param string|null $ean_code ean_code
     *
     * @return self
     */
    public function setEanCode($ean_code)
    {
        $this->container['ean_code'] = $ean_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_desc
     *
     * @return string|null
     */
    public function getShortDesc()
    {
        return $this->container['short_desc'];
    }

    /**
     * Sets short_desc
     *
     * @param string|null $short_desc short_desc
     *
     * @return self
     */
    public function setShortDesc($short_desc)
    {
        $this->container['short_desc'] = $short_desc;

        return $this;
    }

    /**
     * Gets items_per_case
     *
     * @return float|null
     */
    public function getItemsPerCase()
    {
        return $this->container['items_per_case'];
    }

    /**
     * Sets items_per_case
     *
     * @param float|null $items_per_case items_per_case
     *
     * @return self
     */
    public function setItemsPerCase($items_per_case)
    {
        $this->container['items_per_case'] = $items_per_case;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return string|null
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param string|null $web_enabled web_enabled
     *
     * @return self
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets image_uri
     *
     * @return string|null
     */
    public function getImageUri()
    {
        return $this->container['image_uri'];
    }

    /**
     * Sets image_uri
     *
     * @param string|null $image_uri image_uri
     *
     * @return self
     */
    public function setImageUri($image_uri)
    {
        $this->container['image_uri'] = $image_uri;

        return $this;
    }

    /**
     * Gets pricing
     *
     * @return \KwelangaAPI\Model\ProductDetailedItemPricing|null
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     *
     * @param \KwelangaAPI\Model\ProductDetailedItemPricing|null $pricing pricing
     *
     * @return self
     */
    public function setPricing($pricing)
    {
        $this->container['pricing'] = $pricing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


